{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55],"program":"/Users/swilkins/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","flate2","/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"miniz_oxide_c_api\"","--cfg","feature=\"rust_backend\"","-C","metadata=869c563f7b044a74","-C","extra-filename=-869c563f7b044a74","--out-dir","/Users/swilkins/projects/personal/advent/target/rls/debug/deps","-L","dependency=/Users/swilkins/projects/personal/advent/target/rls/debug/deps","--extern","crc32fast=/Users/swilkins/projects/personal/advent/target/rls/debug/deps/libcrc32fast-98bd315716a6cdde.rmeta","--extern","libc=/Users/swilkins/projects/personal/advent/target/rls/debug/deps/liblibc-4b808288b3922eab.rmeta","--extern","miniz_oxide_c_api=/Users/swilkins/projects/personal/advent/target/rls/debug/deps/libminiz_oxide_c_api-a1f3b7248e5e4b47.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/swilkins/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,112,114,111,106,101,99,116,115,47,112,101,114,115,111,110,97,108,47,97,100,118,101,110,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,102,108,97,116,101,50,45,56,54,57,99,53,54,51,102,55,98,48,52,52,97,55,52,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"flate2","disambiguator":[2358354337968714480,2267819783879356207]},"crate_root":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src","external_crates":[{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1174904389790056627,11980377943522478020]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10276658452371951978,13955158368012629210]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6212298039852757345,13056973723602582898]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2472034652193248465,17026985867558116202]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3739559732288738709,15577672448928610229]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3280591782733940230,2391034779898666253]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[17768744230194090356,6249204898376423079]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[18294290771476076947,9562268468698684298]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[6239912042412093818,71364874345811638]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[17618422533075753481,12682123369635823587]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":11,"id":{"name":"crc32fast","disambiguator":[15483678531022739433,809592795514674184]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":12,"id":{"name":"cfg_if","disambiguator":[8507095715086889429,10830784638613307922]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","num":13,"id":{"name":"libc","disambiguator":[7498079790663940337,411304210797161399]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/ffi.rs","num":14,"id":{"name":"miniz_oxide_c_api","disambiguator":[1122638545537992144,4348190919242908966]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/ffi.rs","num":15,"id":{"name":"crc","disambiguator":[7423262719772269245,12502291752426957744]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/ffi.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[15721117931648135487,2372608070384678775]}},{"file_name":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/ffi.rs","num":17,"id":{"name":"adler32","disambiguator":[1874331840878029095,3425362567480822543]}}],"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7808,"line_start":1,"line_end":234,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4060,"byte_end":4063,"line_start":110,"line_end":110,"column_start":15,"column_end":18},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1282},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4065,"byte_end":4074,"line_start":110,"line_end":110,"column_start":20,"column_end":29},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4076,"byte_end":4085,"line_start":110,"line_end":110,"column_start":31,"column_end":40},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1414},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4100,"byte_end":4109,"line_start":111,"line_end":111,"column_start":13,"column_end":22},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4123,"byte_end":4131,"line_start":112,"line_end":112,"column_start":13,"column_end":21},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1420},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4147,"byte_end":4155,"line_start":113,"line_end":113,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1506},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4157,"byte_end":4170,"line_start":113,"line_end":113,"column_start":25,"column_end":38},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1426},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4172,"byte_end":4182,"line_start":113,"line_end":113,"column_start":40,"column_end":50},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1500},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4184,"byte_end":4199,"line_start":113,"line_end":113,"column_start":52,"column_end":67},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1512},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4201,"byte_end":4207,"line_start":113,"line_end":113,"column_start":69,"column_end":75},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1450},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4224,"byte_end":4237,"line_start":114,"line_end":114,"column_start":15,"column_end":28},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1470},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4239,"byte_end":4254,"line_start":114,"line_end":114,"column_start":30,"column_end":45},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4549,"byte_end":4563,"line_start":130,"line_end":130,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1306},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4592,"byte_end":4606,"line_start":131,"line_end":131,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1370},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4630,"byte_end":4639,"line_start":132,"line_end":132,"column_start":23,"column_end":32},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1364},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4663,"byte_end":4672,"line_start":133,"line_end":133,"column_start":23,"column_end":32},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4696,"byte_end":4710,"line_start":134,"line_end":134,"column_start":23,"column_end":37},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1556},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4736,"byte_end":4747,"line_start":135,"line_end":135,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4773,"byte_end":4784,"line_start":136,"line_end":136,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1324},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5002,"byte_end":5016,"line_start":144,"line_end":144,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5046,"byte_end":5060,"line_start":145,"line_end":145,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1388},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5085,"byte_end":5094,"line_start":146,"line_end":146,"column_start":24,"column_end":33},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1382},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5119,"byte_end":5128,"line_start":147,"line_end":147,"column_start":24,"column_end":33},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5155,"byte_end":5166,"line_start":148,"line_end":148,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1562},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5193,"byte_end":5204,"line_start":149,"line_end":149,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1300},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5432,"byte_end":5446,"line_start":157,"line_end":157,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5478,"byte_end":5492,"line_start":158,"line_end":158,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5519,"byte_end":5528,"line_start":159,"line_end":159,"column_start":26,"column_end":35},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5555,"byte_end":5564,"line_start":160,"line_end":160,"column_start":26,"column_end":35},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1358},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5591,"byte_end":5605,"line_start":161,"line_end":161,"column_start":26,"column_end":40},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1544},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5634,"byte_end":5645,"line_start":162,"line_end":162,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5674,"byte_end":5685,"line_start":163,"line_end":163,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1240}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7808,"line_start":1,"line_end":234,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":34},{"krate":0,"index":40},{"krate":0,"index":82},{"krate":0,"index":152},{"krate":0,"index":372},{"krate":0,"index":400},{"krate":0,"index":778},{"krate":0,"index":878},{"krate":0,"index":992},{"krate":0,"index":1210},{"krate":0,"index":1226},{"krate":0,"index":1240},{"krate":0,"index":1256},{"krate":0,"index":1574},{"krate":0,"index":1594},{"krate":0,"index":1590},{"krate":0,"index":1584},{"krate":0,"index":1580},{"krate":0,"index":1576},{"krate":0,"index":1260},{"krate":0,"index":1272}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3054,"byte_end":3076,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3077,"byte_end":3116,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3117,"byte_end":3149,"line_start":79,"line_end":79,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10827,"byte_end":10830,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":319}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1282},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11022,"byte_end":11031,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":325}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11116,"byte_end":11119,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11272,"byte_end":11275,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11499,"byte_end":11505,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11606,"byte_end":11612,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11775,"byte_end":11780,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11935,"byte_end":11942,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12152,"byte_end":12155,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12344,"byte_end":12347,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12459,"byte_end":12469,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12591,"byte_end":12598,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12733,"byte_end":12740,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12847,"byte_end":12852,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13578,"byte_end":13587,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13698,"byte_end":13701,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13813,"byte_end":13823,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13945,"byte_end":13952,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14087,"byte_end":14094,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14201,"byte_end":14206,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14328,"byte_end":14331,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"fn (w: W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22074,"byte_end":22088,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":341}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22303,"byte_end":22306,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22967,"byte_end":22972,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23142,"byte_end":23149,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23394,"byte_end":23401,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23529,"byte_end":23539,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23810,"byte_end":23818,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24052,"byte_end":24061,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25886,"byte_end":25900,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":349}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26188,"byte_end":26191,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26731,"byte_end":26736,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27023,"byte_end":27033,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27153,"byte_end":27160,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27405,"byte_end":27412,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27540,"byte_end":27550,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27819,"byte_end":27827,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27963,"byte_end":27972,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29841,"byte_end":29855,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":355}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30085,"byte_end":30088,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30820,"byte_end":30825,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31021,"byte_end":31028,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31294,"byte_end":31301,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31642,"byte_end":31652,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31951,"byte_end":31959,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32194,"byte_end":32203,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":33978,"byte_end":33992,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":361}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34189,"byte_end":34192,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34510,"byte_end":34522,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35242,"byte_end":35247,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35443,"byte_end":35450,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35716,"byte_end":35723,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36064,"byte_end":36074,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36371,"byte_end":36379,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36516,"byte_end":36525,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38114,"byte_end":38128,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":367}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38458,"byte_end":38461,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38690,"byte_end":38697,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38974,"byte_end":38981,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":39859,"byte_end":39864,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40624,"byte_end":40634,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":41469,"byte_end":41475,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42160,"byte_end":42172,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42498,"byte_end":42506,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42749,"byte_end":42758,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1324},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44690,"byte_end":44704,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":373}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44993,"byte_end":44996,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45198,"byte_end":45205,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45482,"byte_end":45489,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46270,"byte_end":46275,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47016,"byte_end":47026,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47840,"byte_end":47846,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48208,"byte_end":48216,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48386,"byte_end":48395,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":68992,"byte_end":69001,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":387}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69769,"byte_end":69772,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70527,"byte_end":70534,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70801,"byte_end":70808,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70951,"byte_end":70961,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1346},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73328,"byte_end":73337,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74716,"byte_end":74719,"line_start":354,"line_end":354,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75684,"byte_end":75690,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75823,"byte_end":75830,"line_start":394,"line_end":394,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76098,"byte_end":76105,"line_start":402,"line_end":402,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76251,"byte_end":76261,"line_start":407,"line_end":407,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1358},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82050,"byte_end":82064,"line_start":571,"line_end":571,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82312,"byte_end":82315,"line_start":577,"line_end":577,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82525,"byte_end":82531,"line_start":584,"line_end":584,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82659,"byte_end":82666,"line_start":589,"line_end":589,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82919,"byte_end":82926,"line_start":597,"line_end":597,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83057,"byte_end":83067,"line_start":602,"line_end":602,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1364},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84854,"byte_end":84863,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":433}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85411,"byte_end":85414,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85597,"byte_end":85604,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85871,"byte_end":85878,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86021,"byte_end":86031,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1370},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87496,"byte_end":87505,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":439}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87697,"byte_end":87700,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87934,"byte_end":87940,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88072,"byte_end":88079,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88346,"byte_end":88353,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88498,"byte_end":88508,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1376},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90734,"byte_end":90748,"line_start":239,"line_end":239,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91032,"byte_end":91035,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91295,"byte_end":91301,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91433,"byte_end":91440,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91707,"byte_end":91714,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91859,"byte_end":91869,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1382},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93559,"byte_end":93568,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94315,"byte_end":94318,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94477,"byte_end":94484,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94741,"byte_end":94748,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95427,"byte_end":95437,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96810,"byte_end":96816,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1388},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99280,"byte_end":99289,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99696,"byte_end":99699,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"fn (w: W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100028,"byte_end":100034,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100167,"byte_end":100174,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100461,"byte_end":100468,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101121,"byte_end":101131,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101970,"byte_end":101976,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54185,"byte_end":54193,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54436,"byte_end":54444,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54612,"byte_end":54617,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54784,"byte_end":54791,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55077,"byte_end":55093,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55715,"byte_end":55720,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":56115,"byte_end":56132,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1414},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57205,"byte_end":57214,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57449,"byte_end":57452,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57712,"byte_end":57717,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57881,"byte_end":57897,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58060,"byte_end":58065,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58339,"byte_end":58347,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58651,"byte_end":58658,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59021,"byte_end":59026,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59370,"byte_end":59374,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59723,"byte_end":59731,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1420},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109029,"byte_end":109037,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":493}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1426},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109682,"byte_end":109692,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":495}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":509},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":110557,"byte_end":110561,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":513},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111012,"byte_end":111016,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":517},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111549,"byte_end":111556,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111900,"byte_end":111904,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112132,"byte_end":112138,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112190,"byte_end":112204,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1450},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":110303,"byte_end":110316,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":513},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":529}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":110294,"byte_end":112207,"line_start":69,"line_end":109,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":110294,"byte_end":112207,"line_start":69,"line_end":109,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112616,"byte_end":112620,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1470},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":535},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113071,"byte_end":113075,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1470},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":539},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113303,"byte_end":113309,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1470},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113361,"byte_end":113375,"line_start":136,"line_end":136,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1470},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112360,"byte_end":112375,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":535},{"krate":0,"index":539},{"krate":0,"index":543}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112351,"byte_end":113378,"line_start":114,"line_end":137,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112351,"byte_end":113378,"line_start":114,"line_end":137,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1500},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113681,"byte_end":113696,"line_start":148,"line_end":148,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113932,"byte_end":113948,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1506},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114144,"byte_end":114157,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114514,"byte_end":114516,"line_start":173,"line_end":173,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":557},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114995,"byte_end":115003,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":559},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115285,"byte_end":115294,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1512},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114322,"byte_end":114328,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":559}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114313,"byte_end":115297,"line_start":168,"line_end":192,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114313,"byte_end":115297,"line_start":168,"line_end":192,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115618,"byte_end":115621,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116566,"byte_end":116574,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116747,"byte_end":116756,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117613,"byte_end":117618,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119227,"byte_end":119235,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120821,"byte_end":120833,"line_start":333,"line_end":333,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121677,"byte_end":121680,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122482,"byte_end":122490,"line_start":385,"line_end":385,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122665,"byte_end":122674,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123871,"byte_end":123881,"line_start":417,"line_end":417,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":125879,"byte_end":125893,"line_start":462,"line_end":462,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":127634,"byte_end":127639,"line_start":509,"line_end":509,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":902},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":135160,"byte_end":135165,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1538},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":148977,"byte_end":148988,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":579}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149200,"byte_end":149203,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149850,"byte_end":149855,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150025,"byte_end":150032,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150277,"byte_end":150284,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150412,"byte_end":150422,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150693,"byte_end":150701,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150935,"byte_end":150944,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1544},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152736,"byte_end":152747,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":587}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152928,"byte_end":152931,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153561,"byte_end":153566,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153736,"byte_end":153743,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153988,"byte_end":153995,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154123,"byte_end":154133,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154402,"byte_end":154410,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154546,"byte_end":154555,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156295,"byte_end":156306,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":593}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156530,"byte_end":156533,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157253,"byte_end":157258,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157454,"byte_end":157461,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157727,"byte_end":157734,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158075,"byte_end":158085,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158384,"byte_end":158392,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158627,"byte_end":158636,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1556},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160369,"byte_end":160380,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":599}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160571,"byte_end":160574,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160901,"byte_end":160913,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161621,"byte_end":161626,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161822,"byte_end":161829,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162095,"byte_end":162102,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162443,"byte_end":162453,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162750,"byte_end":162758,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162895,"byte_end":162904,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1562},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164502,"byte_end":164513,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":605}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164840,"byte_end":164843,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165065,"byte_end":165072,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165349,"byte_end":165356,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166171,"byte_end":166176,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166936,"byte_end":166946,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":167781,"byte_end":167787,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168472,"byte_end":168484,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168810,"byte_end":168818,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169061,"byte_end":169070,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":170948,"byte_end":170959,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":611}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171245,"byte_end":171248,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171443,"byte_end":171450,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171727,"byte_end":171734,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":172348,"byte_end":172353,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":173129,"byte_end":173139,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":173953,"byte_end":173959,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174321,"byte_end":174329,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174499,"byte_end":174508,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1210},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4515,"byte_end":4519,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1226},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4966,"byte_end":4971,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1240},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5392,"byte_end":5399,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/Users/swilkins/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6630,"byte_end":6641,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6619,"byte_end":6647,"line_start":187,"line_end":187,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6619,"byte_end":6647,"line_start":187,"line_end":187,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6929,"byte_end":6932,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7113,"byte_end":7117,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7227,"byte_end":7231,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7345,"byte_end":7349,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7509,"byte_end":7514,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8469,"byte_end":8478,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8864,"byte_end":8873,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9200,"byte_end":9209,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9576,"byte_end":9585,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10126,"byte_end":10135,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11073,"byte_end":11076,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12094,"byte_end":12103,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12278,"byte_end":12287,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12924,"byte_end":12933,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13137,"byte_end":13146,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13632,"byte_end":13641,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14270,"byte_end":14279,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14471,"byte_end":14480,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22146,"byte_end":22160,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22564,"byte_end":22578,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24143,"byte_end":24157,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24414,"byte_end":24428,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26064,"byte_end":26078,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26335,"byte_end":26349,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28054,"byte_end":28068,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28327,"byte_end":28341,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29928,"byte_end":29942,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30267,"byte_end":30281,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32283,"byte_end":32297,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32516,"byte_end":32530,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34065,"byte_end":34079,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34696,"byte_end":34710,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36605,"byte_end":36619,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36840,"byte_end":36854,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38196,"byte_end":38210,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42845,"byte_end":42859,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43284,"byte_end":43298,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44774,"byte_end":44788,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48482,"byte_end":48496,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48921,"byte_end":48935,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52417,"byte_end":52430,"line_start":115,"line_end":115,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52573,"byte_end":52586,"line_start":123,"line_end":123,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69409,"byte_end":69418,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70446,"byte_end":70455,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71402,"byte_end":71411,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72096,"byte_end":72105,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73930,"byte_end":73936,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74173,"byte_end":74179,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74592,"byte_end":74601,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75586,"byte_end":75595,"line_start":387,"line_end":387,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76356,"byte_end":76365,"line_start":412,"line_end":412,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80132,"byte_end":80141,"line_start":513,"line_end":513,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82101,"byte_end":82115,"line_start":573,"line_end":573,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82416,"byte_end":82430,"line_start":582,"line_end":582,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83144,"byte_end":83158,"line_start":607,"line_end":607,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83388,"byte_end":83402,"line_start":616,"line_end":616,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85051,"byte_end":85060,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85516,"byte_end":85525,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86122,"byte_end":86131,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86271,"byte_end":86280,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87573,"byte_end":87582,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87835,"byte_end":87844,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88599,"byte_end":88608,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88824,"byte_end":88833,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90821,"byte_end":90835,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91185,"byte_end":91199,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91960,"byte_end":91974,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92195,"byte_end":92209,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93955,"byte_end":93964,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97164,"byte_end":97173,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97799,"byte_end":97808,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":98031,"byte_end":98040,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99482,"byte_end":99491,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":102985,"byte_end":102992,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":103176,"byte_end":103185,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":105094,"byte_end":105103,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54335,"byte_end":54343,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57364,"byte_end":57373,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109933,"byte_end":109939,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109981,"byte_end":109987,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113726,"byte_end":113741,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115304,"byte_end":115312,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121452,"byte_end":121462,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128255,"byte_end":128270,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128391,"byte_end":128396,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128531,"byte_end":128546,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128666,"byte_end":128679,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128796,"byte_end":128801,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128934,"byte_end":128947,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129071,"byte_end":129082,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129209,"byte_end":129222,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129359,"byte_end":129365,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":135560,"byte_end":135568,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":136188,"byte_end":136198,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":136896,"byte_end":136909,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":137110,"byte_end":137125,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":138721,"byte_end":138727,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":141746,"byte_end":141752,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":142780,"byte_end":142786,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149046,"byte_end":149057,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149450,"byte_end":149461,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151026,"byte_end":151037,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151291,"byte_end":151302,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152807,"byte_end":152818,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153168,"byte_end":153179,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154637,"byte_end":154648,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154904,"byte_end":154915,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156376,"byte_end":156387,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156703,"byte_end":156714,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158716,"byte_end":158727,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158943,"byte_end":158954,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160450,"byte_end":160461,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161078,"byte_end":161089,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162984,"byte_end":162995,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163213,"byte_end":163224,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164581,"byte_end":164592,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169157,"byte_end":169168,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169582,"byte_end":169593,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171029,"byte_end":171040,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174595,"byte_end":174606,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":175028,"byte_end":175039,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6654,"byte_end":6665,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7572,"byte_end":7583,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8469,"byte_end":8478,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8864,"byte_end":8873,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9200,"byte_end":9209,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9576,"byte_end":9585,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10126,"byte_end":10135,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":4526}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11073,"byte_end":11076,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12094,"byte_end":12103,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12278,"byte_end":12287,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12924,"byte_end":12933,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1282},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13137,"byte_end":13146,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1282},"to":{"krate":1,"index":4526}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13632,"byte_end":13641,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14270,"byte_end":14279,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14471,"byte_end":14480,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22146,"byte_end":22160,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22564,"byte_end":22578,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24143,"byte_end":24157,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1294},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24414,"byte_end":24428,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1294},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26064,"byte_end":26078,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26335,"byte_end":26349,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28054,"byte_end":28068,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28327,"byte_end":28341,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29928,"byte_end":29942,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30267,"byte_end":30281,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32283,"byte_end":32297,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1306},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32516,"byte_end":32530,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1306},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34065,"byte_end":34079,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34696,"byte_end":34710,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36605,"byte_end":36619,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36840,"byte_end":36854,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38196,"byte_end":38210,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42845,"byte_end":42859,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43284,"byte_end":43298,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44774,"byte_end":44788,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48482,"byte_end":48496,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48921,"byte_end":48935,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52417,"byte_end":52430,"line_start":115,"line_end":115,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52573,"byte_end":52586,"line_start":123,"line_end":123,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":1962}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69409,"byte_end":69418,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70446,"byte_end":70455,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71402,"byte_end":71411,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1340},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72096,"byte_end":72105,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1340},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73930,"byte_end":73936,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74173,"byte_end":74179,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":490},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74592,"byte_end":74601,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75586,"byte_end":75595,"line_start":387,"line_end":387,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76356,"byte_end":76365,"line_start":412,"line_end":412,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1346},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80132,"byte_end":80141,"line_start":513,"line_end":513,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1346},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82101,"byte_end":82115,"line_start":573,"line_end":573,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82416,"byte_end":82430,"line_start":582,"line_end":582,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83144,"byte_end":83158,"line_start":607,"line_end":607,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1358},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83388,"byte_end":83402,"line_start":616,"line_end":616,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":1358},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85051,"byte_end":85060,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":1364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85516,"byte_end":85525,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":1364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86122,"byte_end":86131,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1364},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86271,"byte_end":86280,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1364},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87573,"byte_end":87582,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87835,"byte_end":87844,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":1370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88599,"byte_end":88608,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":1370},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88824,"byte_end":88833,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1370},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90821,"byte_end":90835,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91185,"byte_end":91199,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91960,"byte_end":91974,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1376},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92195,"byte_end":92209,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1376},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93955,"byte_end":93964,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97164,"byte_end":97173,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1382},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97799,"byte_end":97808,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1382},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":98031,"byte_end":98040,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1382},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99482,"byte_end":99491,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":102985,"byte_end":102992,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":103176,"byte_end":103185,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1388},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":105094,"byte_end":105103,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1388},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54335,"byte_end":54343,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57364,"byte_end":57373,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109933,"byte_end":109939,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":1700}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109981,"byte_end":109987,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":1712}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113726,"byte_end":113741,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115304,"byte_end":115312,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121452,"byte_end":121462,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128255,"byte_end":128270,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1500},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128391,"byte_end":128396,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":1,"index":3884},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128531,"byte_end":128546,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1500},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128666,"byte_end":128679,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1506},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128796,"byte_end":128801,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":1,"index":3884},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128934,"byte_end":128947,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1506},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129071,"byte_end":129082,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1438},"to":{"krate":0,"index":804}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129209,"byte_end":129222,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1444},"to":{"krate":0,"index":804}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129359,"byte_end":129365,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":135560,"byte_end":135568,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1420},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":136188,"byte_end":136198,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1426},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":136896,"byte_end":136909,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":936}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":137110,"byte_end":137125,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1470},"to":{"krate":0,"index":936}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":138721,"byte_end":138727,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":141746,"byte_end":141752,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1532},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,105,111,46,114,115],"byte_start":142780,"byte_end":142786,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1532},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149046,"byte_end":149057,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149450,"byte_end":149461,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151026,"byte_end":151037,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1538},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151291,"byte_end":151302,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1538},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152807,"byte_end":152818,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153168,"byte_end":153179,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154637,"byte_end":154648,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1544},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154904,"byte_end":154915,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1544},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156376,"byte_end":156387,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156703,"byte_end":156714,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158716,"byte_end":158727,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":1550},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158943,"byte_end":158954,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1550},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160450,"byte_end":160461,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161078,"byte_end":161089,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162984,"byte_end":162995,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1556},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163213,"byte_end":163224,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1556},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164581,"byte_end":164592,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169157,"byte_end":169168,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1562},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169582,"byte_end":169593,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1562},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171029,"byte_end":171040,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174595,"byte_end":174606,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":4500}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":175028,"byte_end":175039,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":4432}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6654,"byte_end":6665,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,119,105,108,107,105,110,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7572,"byte_end":7583,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2632}}]}